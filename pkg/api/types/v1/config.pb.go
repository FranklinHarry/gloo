// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// Config is a top-level config object. It is used internally by gloo as a container for the entire set of config objects.
type Config struct {
	Upstreams       []*Upstream       `protobuf:"bytes,1,rep,name=upstreams" json:"upstreams,omitempty"`
	VirtualServices []*VirtualService `protobuf:"bytes,2,rep,name=virtual_services,json=virtualServices" json:"virtual_services,omitempty"`
	Roles           []*Role           `protobuf:"bytes,3,rep,name=roles" json:"roles,omitempty"`
	Attributes      []*Attribute      `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *Config) GetUpstreams() []*Upstream {
	if m != nil {
		return m.Upstreams
	}
	return nil
}

func (m *Config) GetVirtualServices() []*VirtualService {
	if m != nil {
		return m.VirtualServices
	}
	return nil
}

func (m *Config) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Config) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "gloo.api.v1.Config")
}
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Upstreams) != len(that1.Upstreams) {
		return false
	}
	for i := range this.Upstreams {
		if !this.Upstreams[i].Equal(that1.Upstreams[i]) {
			return false
		}
	}
	if len(this.VirtualServices) != len(that1.VirtualServices) {
		return false
	}
	for i := range this.VirtualServices {
		if !this.VirtualServices[i].Equal(that1.VirtualServices[i]) {
			return false
		}
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !this.Roles[i].Equal(that1.Roles[i]) {
			return false
		}
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	return true
}

func init() { proto.RegisterFile("config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x18, 0x84, 0x59, 0xab, 0x05, 0x53, 0xb1, 0x1a, 0xaa, 0x2c, 0x15, 0x44, 0xbc, 0xd8, 0x8b, 0x09,
	0xb5, 0xe0, 0x5d, 0x05, 0x1f, 0x20, 0xa2, 0x07, 0x2f, 0x92, 0x5d, 0x62, 0x0c, 0xa6, 0xfe, 0x21,
	0x7f, 0x36, 0xe0, 0x1b, 0xf9, 0x5c, 0x1e, 0x7c, 0x0e, 0xd9, 0x64, 0x57, 0xbb, 0xb7, 0xd9, 0x99,
	0x6f, 0xf8, 0x67, 0x43, 0xf6, 0x6a, 0xf8, 0x78, 0x35, 0x9a, 0x39, 0x0f, 0x01, 0xe8, 0x44, 0x5b,
	0x00, 0x26, 0x9d, 0x61, 0x71, 0x39, 0xdf, 0x6f, 0x1c, 0x06, 0xaf, 0xe4, 0x3a, 0x87, 0xf3, 0x59,
	0x34, 0x3e, 0x34, 0xd2, 0xa2, 0xf2, 0xd1, 0xd4, 0xaa, 0x73, 0x89, 0x07, 0xdb, 0xeb, 0xa9, 0x0c,
	0xc1, 0x9b, 0xaa, 0x09, 0xbd, 0x31, 0xd3, 0xa0, 0x21, 0x49, 0xde, 0xaa, 0xec, 0x9e, 0xff, 0x14,
	0x64, 0x7c, 0x97, 0xce, 0xd2, 0x15, 0xd9, 0xed, 0xaf, 0x60, 0x59, 0x9c, 0x8d, 0x16, 0x93, 0xab,
	0x23, 0xb6, 0x31, 0x82, 0x3d, 0x76, 0xa9, 0xf8, 0xe7, 0xe8, 0x3d, 0x39, 0xe8, 0xa6, 0xbc, 0x74,
	0x5b, 0xb0, 0xdc, 0x4a, 0xdd, 0x93, 0x41, 0xf7, 0x29, 0x43, 0x0f, 0x99, 0x11, 0xd3, 0x38, 0xf8,
	0x46, 0x7a, 0x41, 0x76, 0xda, 0xf1, 0x58, 0x8e, 0x52, 0xf9, 0x70, 0x50, 0x16, 0x60, 0x95, 0xc8,
	0x39, 0xbd, 0x26, 0xe4, 0xef, 0xcf, 0xb0, 0xdc, 0x4e, 0xf4, 0xf1, 0x80, 0xbe, 0xe9, 0x63, 0xb1,
	0x41, 0xde, 0xb2, 0xaf, 0xef, 0xd3, 0xe2, 0x79, 0xa1, 0x4d, 0x78, 0x6b, 0x2a, 0x56, 0xc3, 0x9a,
	0x23, 0x58, 0xb8, 0x34, 0xc0, 0xdb, 0x2e, 0x77, 0xef, 0x9a, 0x4b, 0x67, 0x78, 0xf8, 0x74, 0x0a,
	0x79, 0x5c, 0x56, 0xe3, 0xf4, 0x3e, 0xab, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x91, 0xda,
	0x43, 0x95, 0x01, 0x00, 0x00,
}
